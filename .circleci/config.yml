setup: true
version: 2.1
orbs:
  continuation: circleci/continuation@0.2.0
  path-filtering: circleci/path-filtering@1.0.0

workflows:
  setup:
    jobs: 
      - clone    
      - continuation/continue:
          configuration_path: ".circleci/main.yml"
          parameters: /home/circleci/params.json
          pre-steps:
            - attach_workspace:
                at: .    
            - run:
                name: Generate params.json from project.yml
                command: |
                  if [ -z "${CIRCLE_PULL_REQUEST##*/}" ]; then
                    IS_PR=false
                  else
                    IS_PR=true
                  fi
                  echo '{ "is_pr": '$IS_PR'' > /home/circleci/params.json



                  function evaluate_release {
                    set -x
                    echo "INFO, Release ENV: $1"

                    if [ ${IS_PR} = true ]; then
                      git_range="origin/main...$CIRCLE_SHA1"
                    else
                      git_range="origin/main..HEAD~1"
                    fi

                    release_file=$(git diff --name-only "$git_range" | grep -E '^'"$1"'/.*\.yml' | head -n1)
                    changed_project=$(basename "$release_file" .yml)
                    
                    if [ -z "$changed_project" ]; then
                      echo "ERROR: Could not infer project from changed files in $1/"
                      echo ', "skip": true }' >> /home/circleci/params.json
                      return 0
                    fi

                    echo "INFO: Release file detected: $release_file"
                    echo "INFO: Inferred project key: $changed_project"

                    project_file="$1/$changed_project.yml"
                    if [ -f "$project_file" ]; then
                      EXECUTOR=$(yq e '.release.executor.name' "$project_file")
                      TAG=$(yq e '.release.executor.tag' "$project_file")
                      PROJECT_KEY=$(yq e '.release.release_type' "$project_file")
                      SYNC_FROM_YAML=$(yq e '.s3_sync_args.sync_artifacts // false' "$project_file" 2>/dev/null)

                       if [[ "$PROJECT_KEY" == "terraform" ]]; then
                          SYNC_ARTIFACTS=true
                        else
                          SYNC_ARTIFACTS="$SYNC_FROM_YAML"
                        fi

                        echo "INFO: Using executor: $EXECUTOR, tag: $TAG, project_key: $PROJECT_KEY, sync_artifacts: $SYNC_ARTIFACTS"

                        cat <<EOF > /home/circleci/params.json
                  {
                    "is_pr": $IS_PR,
                    "is_release": $is_release,
                    "project_key": "$PROJECT_KEY",
                    "executor": "$EXECUTOR",
                    "tag": "$TAG",
                    "sync_artifacts": $SYNC_ARTIFACTS
                  }
                  EOF
                    else
                      echo "ERROR: Expected release file $project_file not found"
                      echo ', "skip": true }' >> /home/circleci/params.json
                    fi
                    set +x
                  }

                  if [ ${IS_PR} = true ]; then
                    is_prod_release=$(git diff --name-only origin/main...$CIRCLE_SHA1 prod/*.yml | wc -l)
                    is_preprod_release=$(git diff --name-only origin/main...$CIRCLE_SHA1 preprod/*.yml | wc -l)
                  else
                    is_prod_release=$(git diff --name-only origin/main..HEAD~1 prod/*.yml | wc -l)
                    is_preprod_release=$(git diff --name-only origin/main..HEAD~1 preprod/*.yml | wc -l)
                  fi

                  echo "INFO: IS_PROD_RELEASE: $is_prod_release, IS_PREPROD_RELEASE: $is_preprod_release"

                  if [ ${is_prod_release} = 1 ]; then
                    echo "INFO: This is a Release...."
                    is_release=true
                    evaluate_release prod
                  elif [ ${is_preprod_release} = 1 ]; then
                    echo "INFO: This is a Pre-Prod Deployment...."
                    is_release=false
                    evaluate_release preprod
                  elif [ ${is_preprod_release} = 1 ] && [ ${is_prod_release} = 1 ]; then
                    echo "ERROR: Cannot perform Release and Deploy to Preprod at same time"
                    echo ', "skip": true }' >> /home/circleci/params.json
                  elif [ ${is_preprod_release} = 0 ] && [ ${is_prod_release} = 0 ]; then
                    echo "WARN: No release detected"
                    echo ', "skip": true }' >> /home/circleci/params.json
                  else 
                    echo "ERROR: Unknown state"
                    echo ', "skip": true }' >> /home/circleci/params.json
                    exit 1
                  fi

                  cat /home/circleci/params.json
          requires: [clone]        

jobs:
  clone:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Install yq
          command: |
            YQ_VERSION=v4.35.2
            mkdir -p ~/bin
            curl -L "https://github.com/mikefarah/yq/releases/download/${YQ_VERSION}/yq_linux_amd64" -o ~/bin/yq
            chmod +x ~/bin/yq
            echo 'export PATH=~/bin:$PATH' >> "$BASH_ENV"
            source "$BASH_ENV"
            yq --version
      - persist_to_workspace:
          root: .
          paths:
            - .
