name: Generate Release History in README

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
  push:
    branches:
      - '**'     # run on all branches
    tags:
      - 'v*'

# The workflow commits back to the repo
permissions:
  contents: read

jobs:
  release-history:
    # Prevent re-running on the bot's own commit
    if: ${{ github.actor != 'github-actions[bot]' }}
    permissions:
      contents: write
      pull-requests: write
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (full history + tags)
        uses: actions/checkout@v4
        with:
          # If it's a tag push, check out default branch to commit there.
          # If it's a PR, check out the PR head branch.
          # Else, use the current ref (branch push).
          ref: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && github.event.repository.default_branch || github.event.pull_request.head.ref || github.ref }}
          fetch-depth: 0
          fetch-tags: true

      - name: Build release history table from git tags
        id: build_table
        shell: bash
        run: |
          set -euo pipefail
          TAGS=$(git tag --sort=-creatordate | head -n 20)

          if [ -z "$TAGS" ]; then
            TABLE_ROWS="| – | – | No releases yet |"
          else
            TABLE_ROWS=""
            while IFS= read -r tag; do
              date=$(git log -1 --format=%as "$tag" 2>/dev/null || echo "—")
              subject=$(git for-each-ref "refs/tags/$tag" --format='%(subject)' 2>/dev/null)
              if [ -z "$subject" ]; then
                subject=$(git log -1 --pretty=%s "$tag" 2>/dev/null || echo "Release $tag")
              fi
              TABLE_ROWS="${TABLE_ROWS}\n| ${tag} | ${date} | ${subject} |"
            done <<< "$TAGS"
          fi

          # Build block: markers + table only (no extra heading/note to avoid duplicates)
          cat > /tmp/release_block.md <<'EOF'
<!-- RELEASE_HISTORY_START -->

| Version | Date       | Description |
|---------|------------|-------------|
EOF
          printf "%b\n" "$TABLE_ROWS" >> /tmp/release_block.md
          cat >> /tmp/release_block.md <<'EOF'

<!-- RELEASE_HISTORY_END -->
EOF
      - name: Sanity check markers & preview block
        shell: bash
        run: |
          set -euo pipefail
          echo "Checking README markers…"
          grep -n '<!-- RELEASE_HISTORY_START -->' README.md || { echo 'START marker not found'; exit 1; }
          grep -n '<!-- RELEASE_HISTORY_END -->' README.md   || { echo 'END marker not found'; exit 1; }

          echo "Preview generated block (first 12 lines):"
          nl -ba /tmp/release_block.md | head -n 12 || true

      - name: Inject Release History into README.md
        shell: bash
        run: |
          set -euo pipefail
          awk -v block="$(cat /tmp/release_block.md)" '
            BEGIN { in_block=0 }
            /<!-- RELEASE_HISTORY_START -->/ { print block; in_block=1; next }
            /<!-- RELEASE_HISTORY_END -->/   { in_block=0; next }
            !in_block { print }
          ' README.md > README.tmp

          if ! cmp -s README.tmp README.md; then
            mv README.tmp README.md
            echo "README updated."
          else
            echo "No changes to README."
          fi

      - name: Commit README if changed
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add README.md || true
          if git diff --cached --quiet; then
            echo "NOTHING_TO_COMMIT=true" >> "$GITHUB_ENV"
            exit 0
          fi

          git commit -m "ci: update Release History in README"
          echo "NOTHING_TO_COMMIT=false" >> "$GITHUB_ENV"
          
      # Push to PR head (for PR events)
      - name: Push to PR branch
        if: env.NOTHING_TO_COMMIT == 'false' && github.event_name == 'pull_request'
        env:
          TARGET: ${{ github.event.pull_request.head.ref }}
        run: git push origin "HEAD:${TARGET}"

      # Push back to the same branch (for branch pushes)
      - name: Push to same branch
        if: env.NOTHING_TO_COMMIT == 'false' && startsWith(github.ref, 'refs/heads/')
        env:
          TARGET: ${{ github.ref_name }}
        run: git push origin "HEAD:${TARGET}"

      # Push to default branch (for tag pushes)
      - name: Push to default branch (tag push)
        if: env.NOTHING_TO_COMMIT == 'false' && startsWith(github.ref, 'refs/tags/')
        env:
          TARGET: ${{ github.event.repository.default_branch }}
        run: git push origin "HEAD:${TARGET}"
